# -- Project info

[project]
version = "0.4.4"
name = "jupyter-rfb"
description = "Remote Frame Buffer for Jupyter"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.9"
authors = [{ name = "Almar Klein" }]
keywords = [
    "ipython",
    "jupyter",
    "remote frame buffer",
    "visualization",
    "widgets",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: IPython",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Topic :: Multimedia :: Graphics",
]
dependencies = ["ipywidgets>=7.6.0,<9", "jupyterlab-widgets", "numpy"]
[project.optional-dependencies]
build = ["build", "hatchling", "hatch-jupyter-builder", "twine"]
lint = ["ruff", "pre-commit"]
tests = ["pytest", "simplejpeg"]
docs = ["numpy", "ipywidgets", "sphinx", "nbsphinx"]
dev = ["jupyter_rfb[build,lint,tests,docs]"]

[project.urls]
Homepage = "https://github.com/vispy/jupyter_rfb"
Documentation = "https://jupyter-rfb.readthedocs.io/en/stable/"
Repository = "https://github.com/vispy/jupyter_rfb"


# --- Build system
# To do a release, run `python release.py`

[build-system]
requires = ["hatchling", "jupyterlab>=3.0.0,<5"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel.shared-data]
"jupyter_rfb/nbextension/*.*" = "share/jupyter/nbextensions/jupyter_rfb/*.*"
"jupyter_rfb/labextension" = "share/jupyter/labextensions/jupyter_rfb"
"./install.json" = "share/jupyter/labextensions/jupyter_rfb/install.json"
"./jupyter_rfb.json" = "etc/jupyter/nbconfig/notebook.d/jupyter_rfb.json"

[tool.hatch.build.targets.sdist]
exclude = [".github", ".git"]

[tool.hatch.build.hooks.jupyter-builder]
ensured-targets = ["js/dist/index.js"]
dependencies = ["hatch-jupyter-builder"]
build-function = "hatch_jupyter_builder.npm_builder"

[tool.hatch.build.hooks.jupyter-builder.build-kwargs]
path = "js"
build_cmd = "build:prod"
npm = ["yarn"]

# --- Tooling

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["F", "E", "W", "N", "B", "RUF"]
ignore = [
    "E501",   # Line too long
    "E731",   # Do not assign a `lambda` expression, use a `def`
    "RUF006", # Store a reference to the return value of `loop.create_task`
]


[tool.coverage.report]
exclude_also = [
    # Have to re-enable the standard pragma, plus a less-ugly flavor
    "pragma: no cover",
    "no-cover",
    "raise NotImplementedError",
]
